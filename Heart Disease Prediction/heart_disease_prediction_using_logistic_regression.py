# -*- coding: utf-8 -*-
"""Heart Disease Prediction using Logistic Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Bbt7XMpA_bInwjE4XGI1jPYNLHCl31o

**Importing the Dependencies**

Aim: To predict if the person has a heart disease or not, using various features available from the dataset
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""**EDA**

Heart Disease Dataset: https://www.kaggle.com/ronitf/heart-disease-uci
"""

heart_data = pd.read_csv(r'heart.csv') # loading the csv data to a Pandas DataFrame

heart_data.head() # print first 5 rows of the dataset

heart_data.tail() # print last 5 rows of the dataset

heart_data.shape # number of rows and columns in the dataset

heart_data.info() # getting some info about the data

heart_data.isnull().sum() # checking for missing values

heart_data.describe() # statistical measures about the data

heart_data['target'].value_counts() # checking the distribution of Target Variable

"""1 --> Defective Heart

0 --> Healthy Heart

**Splitting the Features & Target**
"""

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""**Splitting the Data**"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=101)

print(X.shape, X_train.shape, X_test.shape)

"""**Model Training**

Logistic Regression
"""

model = LogisticRegression(solver = 'liblinear', max_iter=100)

# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

"""**Model Evaluation**

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

"""**Making a Predictive System**"""

input_data = (41,0,1,130,204,0,0,172,0,1.4,2,0,2)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')

"""Code written by Dhrumil Vadodaria!!

Connect with me on LinkedIn for future discussions on ML: https://www.linkedin.com/in/dhrumil-v-814932128/

Please provide citation if you use the code!
"""