# -*- coding: utf-8 -*-
"""House Price Prediction using XGBoost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nw0omKhaP7OFqWdgSECpD3aJgzbAHlvU

Importing dependencies and libraries

Aim: To predict house prices of Boston, using various different features in our model from the provided dataset
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Importing the Boston House Price Dataset

Boston House Price Dataset: https://www.kaggle.com/vikrishnan/boston-house-prices
"""

house_price_dataset = sklearn.datasets.load_boston()

print(house_price_dataset)

house_price_dataframe = pd.DataFrame(house_price_dataset.data, columns = house_price_dataset.feature_names) # Loading the dataset to a Pandas DataFrame

house_price_dataframe.head() # Print First 5 rows of our DataFrame

house_price_dataframe['price'] = house_price_dataset.target # add the target (price) column to the DataFrame

house_price_dataframe.shape # checking the number of rows and Columns in the data frame

house_price_dataframe.isnull().sum() # check for missing values

house_price_dataframe.describe() # statistical measures of the dataset

"""Understanding the correlation between various features in the dataset"""

correlation = house_price_dataframe.corr()

# constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='GnBu')

"""Splitting the data and Target"""

X = house_price_dataframe.drop(['price'], axis=1)
Y = house_price_dataframe['price']

print(X)
print(Y)

"""Splitting the data into Training data and Test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""**Model** **Training**

XGBoost Regressor
"""

model = XGBRegressor() # loading the model

model.fit(X_train, Y_train) # training the model with X_train

"""**Evaluation**

Prediction on training data
"""

training_data_prediction = model.predict(X_train) # accuracy for prediction on training data

# R squared error
score_1 = metrics.r2_score(Y_train, training_data_prediction)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)

# Mean Squared Error
score_3 = metrics.mean_squared_error(Y_train, training_data_prediction)

# Root Mean squared Error
score_4 = np.sqrt(score_3)

print("R squared error : ", score_1)
print('Mean Absolute Error : ', score_2)
print("Mean squared error : ", score_3)
print('Root Mean squared error : ', score_4)

"""Visualization of Actual Prices and Predicted prices"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Price vs Preicted Price")
plt.show()

"""Prediction on Test Data """

test_data_prediction = model.predict(X_test) # accuracy for prediction on test data

# R squared error
score_1 = metrics.r2_score(Y_test, test_data_prediction)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_test, test_data_prediction)

# Mean Squared Error
score_3 = metrics.mean_squared_error(Y_test, test_data_prediction)

# Root Mean squared Error
score_4 = np.sqrt(score_3)

print("R squared error : ", score_1)
print('Mean Absolute Error : ', score_2)
print("Mean squared error : ", score_3)
print('Root Mean squared error : ', score_4)

"""Code written by Dhrumil Vadodaria!!

Connect with me on LinkedIn for future discussions on ML: https://www.linkedin.com/in/dhrumil-v-814932128/

Please provide citation if you use the code!
"""