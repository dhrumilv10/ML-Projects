# -*- coding: utf-8 -*-
"""Gold Price Prediction using Random Forest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qTMudctDq6c46vMFN9ZRYXFhFJgAuRPV

**Importing dependencies and libraries**

Aim: To predict gold prices using the various features from the given dataset
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

"""**EDA**

Gold Price Dataset: https://www.kaggle.com/altruistdelhite04/gold-price-data
"""

gold_df = pd.read_csv(r'gld_price_data.csv')

gold_df.head() # print first 5 rows in the dataframe

gold_df.tail()

gold_df.shape # number of rows and columns

gold_df.info() # getting some basic informations about the data

gold_df.isnull().sum() # checking the number of missing values

gold_df.describe() # getting the statistical measures of the data

"""**Correlation:**
1. Positive Correlation
2. Negative Correlation
"""

correlation = gold_df.corr()

# constructing a heatmap to understand the correlatiom
plt.figure(figsize = (7,7))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f',annot=True, annot_kws={'size':8}, cmap='GnBu')

print(correlation['GLD']) # correlation values of GLD

sns.distplot(gold_df['GLD'],color='red') # checking the distribution of the GLD Price

"""**Splitting Target & Features**"""

X = gold_df.drop(['Date','GLD'],axis=1)
Y = gold_df['GLD']

print(X)

print(Y)

"""**Splitting into Training data and Test Data**"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state=101)

"""**Model Training**

Random Forest Regressor
"""

regressor = RandomForestRegressor(n_estimators=100)

# training the model
regressor.fit(X_train,Y_train)

"""**Model Evaluation**"""

# prediction on Test Data
test_data_prediction = regressor.predict(X_test)

# R squared error
score_1 = metrics.r2_score(Y_test, test_data_prediction)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_test, test_data_prediction)

# Mean Squared Error
score_3 = metrics.mean_squared_error(Y_test, test_data_prediction)

# Root Mean squared Error
score_4 = np.sqrt(score_3)

print("R squared error : ", score_1)
print('Mean Absolute Error : ', score_2)
print("Mean squared error : ", score_3)
print('Root Mean squared error : ', score_4)

"""**Compare the Actual Values and Predicted Values in a Plot**"""

Y_test = list(Y_test)

plt.plot(Y_test, color='black', label = 'Actual Value')
plt.plot(test_data_prediction, color='orange', label='Predicted Value')
plt.title('Actual Price vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('GLD Price')
plt.legend()
plt.show()

"""Code written by Dhrumil Vadodaria!!

Connect with me on LinkedIn for future discussions on ML: https://www.linkedin.com/in/dhrumil-v-814932128/

Please provide citation if you use the code!
"""