# -*- coding: utf-8 -*-
"""Diabetes Prediction SVM Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1obyCbeBMJiEI0_XqSi2jrCxdCLzdr9bh

Importing dependencies and libraries

Aim: To predict if the person is diabetic or not, using various different features in our model
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn import metrics

"""EDA

PIMA Diabetes Dataset: https://www.kaggle.com/uciml/pima-indians-diabetes-database
"""

diabetes_dataset = pd.read_csv(r'diabetes.csv') # loading the diabetes dataset to a pandas DataFrame

pd.read_csv?

diabetes_dataset.head() # printing the first 5 rows of the dataset

diabetes_dataset.shape # number of rows and Columns in this dataset

diabetes_dataset.describe() # getting the statistical measures of the data

diabetes_dataset['Outcome'].value_counts()

"""0 --> Non-Diabetic

1 --> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

sns.pairplot(diabetes_dataset)

# Separating labels 
X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.3, stratify=Y, random_state=42)

print(X.shape, X_train.shape, X_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train, Y_train) #training the support vector Machine Classifier

"""Model Evaluation

Accuracy Score
"""

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

"""Making a Predictive System"""

input_data = (7,154,87,29,175,33.6,0.183,22)

input_data_as_numpy_array = np.asarray(input_data) # changing the input_data to numpy array

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1) # reshape the array 

std_data = scaler.transform(input_data_reshaped) # standardize the input data
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('\nThe person is diabetic')

"""Code written by Dhrumil Vadodaria!!

Connect with me on LinkedIn for future discussions on ML: https://www.linkedin.com/in/dhrumil-v-814932128/

Please provide citation if you use the code!
"""