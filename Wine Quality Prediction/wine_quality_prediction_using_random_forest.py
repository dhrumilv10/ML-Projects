# -*- coding: utf-8 -*-
"""Wine Quality Prediction using Random Forest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U2a321305g7kxejuFWCOHvKhgRKoQK1x

Importing dependencies and libraries

Aim: To predict if the red wine quality is good or bad uing various  relevant features provided in the dataset
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics

"""EDA

Red Wine Quality Dataset: https://www.kaggle.com/uciml/red-wine-quality-cortez-et-al-2009
"""

wine_dataset = pd.read_csv(r'winequality-red.csv') # loading the dataset to a Pandas DataFrame

# number of rows & columns in the dataset
wine_dataset.shape

# first 5 rows of the dataset
wine_dataset.head()

# checking for missing values
wine_dataset.isnull().sum()

"""Data Analysis and Visulaization"""

wine_dataset.describe() # statistical measures of the dataset

sns.catplot(x='quality', data = wine_dataset, kind = 'count') # number of values for each quality

# volatile acidity vs Quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y = 'volatile acidity', data = wine_dataset)

# citric acid vs Quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y = 'citric acid', data = wine_dataset)

"""Correlation

1. Positive Correlation
2. Negative Correlation
"""

correlation = wine_dataset.corr()

# constructing a heatmap to understand the correlation between the columns
plt.figure(figsize=(9,9))
sns.heatmap(correlation, cbar=True, square=True, fmt = '.1f', annot = True, annot_kws={'size':8}, cmap = 'GnBu')

"""Data Preprocessing"""

# separate the data and Label
X = wine_dataset.drop('quality',axis=1)

print(X)

"""Label Binarizaton"""

Y = wine_dataset['quality'].apply(lambda y_value: 1 if y_value>=7 else 0) # converting to 1s and 0s binary numbers

print(Y)

"""Train & Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=3)

print(Y.shape, Y_train.shape, Y_test.shape)

"""Model Training:

Random Forest Classifier
"""

model = RandomForestClassifier()

model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy : ', test_data_accuracy)

"""Building a Predictive System"""

input_data = (10.7,0.35,0.53,2.6,0.07,5.0,16.0,0.9972,3.15,0.65,11)

# changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the data as we are predicting the label for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==1):
  print('Good Quality Wine')
else:
  print('Bad Quality Wine')

"""Code written by Dhrumil Vadodaria!!

Connect with me on LinkedIn for future discussions on ML: https://www.linkedin.com/in/dhrumil-v-814932128/

Please provide citation if you use the code!
"""